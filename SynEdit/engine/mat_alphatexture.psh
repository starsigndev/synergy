
Texture2D    v_Texture;
SamplerState v_Texture_sampler;


struct PSInput 
{ 
  float4 Pos   : SV_POSITION;
  float3 Uv : TEX_COORD;
  float4 v_Color : COLOR2;
  float4 v_Scissor : POSITION1;
  float4 v_Fx : POSITION2;

 // float3 Norm : NORMAL0;x
};

struct PSOutput
{
    float4 Color : SV_TARGET;
};

// Note that if separate shader objects are not supported (this is only the case for old GLES3.0 devices), vertex
// shader output variable name must match exactly the name of the pixel shader input variable.
// If the variable has structure type (like in this example), the structure declarations must also be identical.
void main(in  PSInput  PSIn,
    out PSOutput PSOut)
{

    
  
    float px,py;

    px = PSIn.Pos.x;
    py = PSIn.Pos.y;



  if(PSIn.v_Scissor.x>=0)
    {
        if(px<PSIn.v_Scissor.x)
        {
            clip(-1);
            return;
        }
        if(px>PSIn.v_Scissor.x+PSIn.v_Scissor.z){
            clip(-1);
            return;
        }
        if(py<PSIn.v_Scissor.y)
        {
            clip(-1);
            return;
        }
        if(py>PSIn.v_Scissor.y+PSIn.v_Scissor.w)
        {
            clip(-1);
            return;
        }
    }
   
  
    if(PSIn.v_Fx.x>0)
    {

     float3 col = float3(0,0,0);

    float2 uv = PSIn.Uv;

    float rx = -4;
    float ry = -4;

    float ux,uy;

    uy = uv.y + (-4 * PSIn.v_Fx.y);

    while(true)
    {

        float ux = uv.x+(rx*PSIn.v_Fx.x);
        
        col = col + v_Texture.Sample(v_Texture_sampler,float2(ux,uy)).rgb;

        rx++;
        if(rx==5)
        {
            rx=-4;
            ry++;
            uy = uv.y +(ry *PSIn.v_Fx.y);
            if(ry==5)
            {
                break;
            }
        }
    }

    float4 ffcol;

    col = col / (4*4);

    ffcol.rgb = col;

    ffcol.a = 1.0;



    PSOut.Color = ffcol;

       float4 ac =v_Texture.Sample(v_Texture_sampler, PSIn.Uv) * PSIn.v_Color;


       if(ac.a<=0.1)
    {
        clip(-1);
        return;
    }

    }else{

    float4 ffcol =v_Texture.Sample(v_Texture_sampler, PSIn.Uv) * PSIn.v_Color;

    if(ffcol.a<=0.1)
    {
        clip(-1);
        return;
    }

    PSOut.Color = ffcol;

    }

}

