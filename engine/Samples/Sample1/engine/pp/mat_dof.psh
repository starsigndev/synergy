
Texture2D    v_Texture;
SamplerState v_Texture_sampler;
Texture2D v_TextureAux;
SamplerState v_TextureAux_sampler;

struct PSInput 
{ 
  float4 Pos   : SV_POSITION;
  float3 Uv : TEX_COORD;
  float4 v_Color : COLOR2;
  float4 v_Dof : COLOR3;
 
 // float3 Norm : NORMAL0;x
};

struct PSOutput
{
    float4 Color : SV_TARGET;
};

// Note that if separate shader objects are not supported (this is only the case for old GLES3.0 devices), vertex
// shader output variable name must match exactly the name of the pixel shader input variable.
// If the variable has structure type (like in this example), the structure declarations must also be identical.
void main(in  PSInput  PSIn,
    out PSOutput PSOut)
{

    float4 ffcol;

    
    float p_depth = v_Texture.Sample(v_Texture_sampler,PSIn.Uv).r;

    float3 p_col = v_TextureAux.Sample(v_TextureAux_sampler,PSIn.Uv).rgb;

    float bf = clamp((abs(p_depth - PSIn.v_Dof.x) - PSIn.v_Dof.y) / PSIn.v_Dof.y, 0.0, 1.0);

    float be = 0.0018f;


    float samples=0;

    float aa = 10;

    float3 fcol = float3(0,0,0);

    for(float y=-aa;y<aa;y++){

        for(float x=-aa;x<aa;x++){


            

            float2 uv = PSIn.Uv.xy;
            uv.x = uv.x + float(x)*be*bf;
            uv.y = uv.y + float(y)*be*bf;

            if(uv.x>=0.0 && uv.x<=1.0 && uv.y>=0.0 && uv.y<=1.0f){

               
                   fcol = fcol+v_TextureAux.Sample(v_TextureAux_sampler,float3(uv.x,uv.y,1.0f)).rgb;
                    samples = samples+1;
               

           

            }
            
        }

    }

  
    fcol = fcol / samples;

    ffcol.rgb = fcol;
    ffcol.a =1.0;

    PSOut.Color = ffcol;


}

