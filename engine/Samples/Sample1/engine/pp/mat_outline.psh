
Texture2D    v_Texture;
SamplerState v_Texture_sampler;
Texture2D v_TextureAux;
SamplerState v_TextureAux_sampler;

struct PSInput 
{ 
  float4 Pos   : SV_POSITION;
  float3 Uv : TEX_COORD;
  float4 v_Color : COLOR2;
  float4 v_LineColor : COLOR3;
 
 // float3 Norm : NORMAL0;x
};

struct PSOutput
{
    float4 Color : SV_TARGET;
};

// Note that if separate shader objects are not supported (this is only the case for old GLES3.0 devices), vertex
// shader output variable name must match exactly the name of the pixel shader input variable.
// If the variable has structure type (like in this example), the structure declarations must also be identical.
void main(in  PSInput  PSIn,
    out PSOutput PSOut)
{

    float4 ffcol;

    //ffcol.rgb = float3(1,0,0);
    //float c = texture(g_TextureDepth,out_TexCoord).r;
    //float c1 = texture(g_TextureDepth,out_TexCoord+vec2(-0.003,0)).r;
    //float c2 = texture(g_TextureDepth,out_TexCoord+vec2(0,-0.003)).r;
    
    float c = v_Texture.Sample(v_Texture_sampler,PSIn.Uv).r;
    float c1 = v_Texture.Sample(v_Texture_sampler,PSIn.Uv+float3(-0.003,0,0)).r;
    float c2 = v_Texture.Sample(v_Texture_sampler,PSIn.Uv+float3(0,-0.003,0)).r;


//    vec4 co;

    if(abs(c1-c)>0.004 || abs(c2-c)>0.004)
    {
        ffcol.rgb = PSIn.v_LineColor.rgb;
 //       co.rgb = vec3(0,1,1);
    }else{
        ffcol.rgb = float3(0,0,0);
    }



    ffcol.a = 1.0;

    PSOut.Color = ffcol;


}

