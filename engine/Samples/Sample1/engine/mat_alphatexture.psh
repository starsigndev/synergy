
Texture2D    v_Texture;
SamplerState v_Texture_sampler;


struct PSInput 
{ 
  float4 Pos   : SV_POSITION;
  float3 Uv : TEX_COORD;
  float4 v_Color : COLOR2;
  float4 v_Scissor : POSITION1;
 // float3 Norm : NORMAL0;x
};

struct PSOutput
{
    float4 Color : SV_TARGET;
};

// Note that if separate shader objects are not supported (this is only the case for old GLES3.0 devices), vertex
// shader output variable name must match exactly the name of the pixel shader input variable.
// If the variable has structure type (like in this example), the structure declarations must also be identical.
void main(in  PSInput  PSIn,
    out PSOutput PSOut)
{

    
  
    float px,py;

    px = PSIn.Pos.x;
    py = PSIn.Pos.y;



  if(PSIn.v_Scissor.x>=0)
    {
        if(px<PSIn.v_Scissor.x)
        {
            clip(-1);
            return;
        }
        if(px>PSIn.v_Scissor.x+PSIn.v_Scissor.z){
            clip(-1);
            return;
        }
        if(py<PSIn.v_Scissor.y)
        {
            clip(-1);
            return;
        }
        if(py>PSIn.v_Scissor.y+PSIn.v_Scissor.w)
        {
            clip(-1);
            return;
        }
    }
   
  
    float4 ffcol =v_Texture.Sample(v_Texture_sampler, PSIn.Uv) * PSIn.v_Color;

    if(ffcol.a<=0.1)
    {
        clip(-1);
        return;
    }

    PSOut.Color = ffcol;


}

